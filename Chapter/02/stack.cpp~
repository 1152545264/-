#include <iostream>
#include <stack>
#include <string>
#include <map>

using namespace std;

int calculate(string notation)
{
    stack < int >result;
    for (int i = 0; i < notation.length(); i++)
        if (isdigit(notation.at(i)))
            result.push(notation.at(i) - '0');
        else
        {
            int b = result.top();
            result.pop();
            int a = result.top();
            result.pop();

            switch (notation.at(i))
            {
            case '+':
                result.push(a + b);
                break;
            case '-':
                result.push(a - b);
                break;
            case '*':
                result.push(a * b);
                break;
            case '/':
                result.push(a / b);
                break;
            default:
                break;
            }
        }

    return result.top();
}

bool comparePriority(char a, char b)
{
    map < char, int >priority;
    priority.insert(pair < char, int >('+', 1));
    priority.insert(pair < char, int >('-', 1));
    priority.insert(pair < char, int >('*', 2));
    priority.insert(pair < char, int >('/', 2));
    priority.insert(pair < char, int >('(', 3));
    priority.insert(pair < char, int >(')', 3));

    return priority[a] > priority[b];
}

string parseToReversePolishNotation(string infixNotation)
{
    stack < char >number;
    stack < char >operators;

    for (int i = 0; i < infixNotation.length(); i++)
    {
        char c = infixNotation.at(i);
        if (isdigit(c))
            number.push(c);
        else
        {
            if (c == '(')
                operators.push(c);
            else if (c == ')')
            {
                while (!operators.empty() && operators.top() != '(')
                {
                    number.push(operators.top());
                    operators.pop();
                }

                if (!operators.empty())
                    operators.pop();
            }
            else
            {
                if (operators.empty() || operators.top() == '(' || comparePriority(c, operators.top()))
                    operators.push(c);
                else
                {
                    while (!operators.empty()
                        && !comparePriority(c, operators.top()))
                    {
                        number.push(operators.top());
                        operators.pop();
                    }

                    operators.push(c);
                }
            }
        }
    }

    while (!operators.empty())
    {
        number.push(operators.top());
        operators.pop();
    }

    string notation;
    while (!number.empty())
    {
        notation = number.top() + notation;
        number.pop();
    }

    cout << notation << endl;
    return notation;
}

int main(int argc, char *argv[])
{
    string line;
    while (getline(cin, line), line.length() > 0)
        cout << calculate(parseToReversePolishNotation(line)) << endl;

    return 0;
}
