PROGRAM SAMPLEINPUT;

VAR
  TEMP : RECORD
    FIRST, SECOND : REAL;
    END;

BEGIN {Ignore this }
TEMP.FIRST := 5.0E-2;
READLN (TEMP.SECOND); 
WRITELN ('THE ANSWER IS', TEMP.FIRST * TEMP.SECOND : 7 : 3)
END.
~~A. N. Onymous

program test;
VAR
ch : array [1..20] of Char;
BEGIN {Ignore 'like a string'}
Temp := 2;
iden := $abFe90;
_iden_ := 1e-90;
END.
~~Jan

begin 
writeln('~~~~~~'); 
{~~~~~~~~~~~~~} 
end. 
~~anonimus

program test;
VAR
ch:array['a' .. 'z']of Char;
BEGIN{Ignore 'like a
string'}
Temp:=2;
WRITELN ('''', TEMP.FIRST <= TEMP.SECOND : 7 : 3)
WRITELN ('''a is b''s', TEMP.FIRST <> TEMP.SECOND : 7 : 3)
iden:=($abFe90+1e-90)*2;
END.
~~bleed1979

begin
    comment Algol program print the primes less than 1000 using the 
            sieve method.;
    Boolean array sieve[2:1000];
    integer p, count;

    comment Eliminate the multiples of the argument prime number;
    procedure eliminate(p);
        integer p;
        begin
            integer i;
            for i := 2*p step p until 1000 do
                sieve[i] := false
        end;

    comment Clear the sieve.;
    integer i;
    for i := 2 step 1 until 1000 do
        sieve[i] := true;

    comment Find the primes in range.;
    for i := 2 step 1 until 1000 do
        if sieve[i] then
            eliminate(i);

    comment Print the results, 10 per line.;
    p := 2;
    for count := 0 while p <= 1000 do begin
        comment This construct is similar to a do .. while built with a goto.;
        makeline:
            if sieve[p] then begin
                outinteger(1,p);
                outstring(1,' ');
                count := count + 1
            end;
            p := p + 1;
            if p <= 1000 & count < 10 then goto makeline;
        outstring(1,'\n')
    end

end
~~Algol

PROGRAM ppl(input, output);

VAR
   aline : string;
   tot : INTEGER;
   legal : SET OF CHAR;

BEGIN
WHILE NOT eof DO
   BEGIN
   tot := 0;
   REPEAT
      readln(aline);
      IF pos('~~', aline) <> 1 THEN
         BEGIN
	 WHILE aline <> '' DO
	    BEGIN
	    CASE aline[1] OF
	     'a'..'z', 'A'..'Z', '_':
	       BEGIN
	       inc(tot);
	       WHILE (aline <> '') AND (aline[1] IN ['_', '0'..'9',
		                        'a'..'z', 'A'..'Z']) DO
		  delete(aline, 1, 1);
	       END;
	     '+', '-', '*', '/', '=', '@', '^', '[':
	       BEGIN
	       inc(tot);
	       delete(aline, 1, 1);
	       END;
	     '<':
	       BEGIN
	       inc(tot);
	       delete(aline, 1, 1);
	       IF (aline <> '') AND (aline[1] IN ['>', '=']) THEN
		  delete(aline, 1, 1);
	       END;
	     '>':
	       BEGIN
	       inc(tot);
	       delete(aline, 1, 1);
	       IF (aline <> '') AND (aline[1] IN ['=']) THEN
		  delete(aline, 1, 1);
	       END;
	     ':':
	       BEGIN
	       delete(aline, 1, 1);
	       IF (aline <> '') AND (aline[1] = '=') THEN
		  BEGIN
		  inc(tot);
		  delete(aline, 1, 1);
		  END;
	       END;
	     '{':
	       BEGIN
	       WHILE pos('}', aline) = 0 DO
		  readln(aline);
	       delete(aline, 1, pos('}', aline));
	       END;
	     '(':
	       BEGIN
	       delete(aline, 1, 1);
	       IF (aline <> '') AND (aline[1] = '*') THEN
		  BEGIN
		  WHILE pos('*)', aline) = 0 DO
		     readln(aline);
		  delete(aline, 1, pos('*)', aline));
	          END
 	       ELSE
		  inc(tot);
	       END;
	     '''':
	       BEGIN
	       inc(tot);
	       WHILE (aline <> '') AND (pos('''', aline) = 1) DO
		  BEGIN
		  delete(aline,  1, 1);
	 	  delete(aline, 1, pos('''', aline));
		  END;
	       END;
	     '$':
	       BEGIN
	       delete(aline, 1, 1);
	       inc(tot);
	       WHILE (aline <> '') AND (aline[1] IN ['0'..'9', 'a'..'f',
			                'A'..'F']) DO
		  delete(aline, 1, 1);
	       END;
	     '0'..'9':
	       BEGIN
	       inc(tot);
	       legal := ['0'..'9', '.'];
	       WHILE (aline <> '') AND (aline[1] IN legal) DO
	  	  BEGIN
		  IF aline[1] = '.' THEN
		     legal := ['0'..'9'];
		  delete(aline, 1, 1);
	   	  END;
	       IF (aline <> '') AND (aline[1] IN ['e', 'E']) THEN
		  BEGIN
		  delete(aline, 1, 1);
		  WHILE (aline <> '') AND (aline[1] = ' ') DO
		     delete(aline, 1, 1);
		  IF (aline <> '') AND (aline[1] IN ['+', '-']) THEN
		     delete(aline, 1, 1);
		  WHILE (aline <> '') AND (aline[1] = ' ') DO
		     delete(aline, 1, 1);
		  WHILE (aline <> '') AND (aline[1] IN ['0'..'9']) DO
		     delete(aline, 1, 1);
		  END;
	       END;
	     OTHERWISE
	       delete(aline, 1, 1);
	    END;
	 END;
      END;
   UNTIL pos('~~', aline) = 1;

   writeln('Program by ', copy(aline, 3, 1000), ' contains ', tot:1, ' units.');
   END;
END.
~~soln
