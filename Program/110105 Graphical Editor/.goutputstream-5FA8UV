#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iterator>

using namespace std;

ostream & operator<<(ostream & out, const vector < vector < char >>&v)
{
	for (vector < vector < char >>::const_iterator p = v.begin(); p < v.end(); p++)
	{
		copy((*p).begin(), (*p).end(), ostream_iterator < char >(cout, ""));
		cout << '\n';
	}

	return out;
}

void reset(vector < vector < char >>matrix)
{
	for (vector < vector < char >>::iterator p = matrix.begin(); p < matrix.end(); p++)
	{
		fill((*p).begin(), (*p).end(), 'O');
	}
}

void set_pixel(vector < vector < char >>matrix, int x, int y, char c)
{
	matrix.at(y).at(x) = c;
}

void fill_rect(vector < vector < char >>matrix, int x1, int y1, int x2, int y2, char c)
{
	for (int i = y1; i <= y2; i++)
	{
		for (int j = x1; j <= x2; j++)
		{
			matrix.at(i).at(j) = c;
		}
	}
}

void fill_region(vector < vector < char >>matrix, int x, int y, char old_color, char new_color)
{
	if (old_color == new_color)
		return;

	matrix.at(y).at(x) = new_color;

	if (x > 0)
		if (matrix.at(y).at(x - 1) == old_color)
			fill_region(matrix, x - 1, y, old_color, new_color);

	if (x < matrix.at(y).size() - 1)
		if (matrix.at(y).at(x + 1) == old_color)
			fill_region(matrix, x + 1, y, old_color, new_color);

	if (y > 0)
		if (matrix.at(y - 1).at(x) == old_color)
			fill_region(matrix, x, y - 1, old_color, new_color);

	if (y < matrix.size() - 1)
		if (matrix.at(y + 1).at(x) == old_color)
			fill_region(matrix, x, y + 1, old_color, new_color);
}

void swap(int &a, int &b)
{
	int tmp = a;
	a = b;
	b = tmp;
}

int main(int argc, char *argv[])
{
	vector < vector < char >>matrix;
	string line;
	int m, n, x, y, x1, x2, y1, y2;
	char code, c, file[13];

	getline(cin, line);
	while (line[0] != 'X')
	{
		istringstream iss(line);

		iss >> code;
		switch (code)
		{
			// 